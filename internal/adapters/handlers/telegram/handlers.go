package telegram

import (
	"errors"
	"fmt"
	"strconv"
	"strings"
	"travelWallet/internal/domain"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var ErrWalletNotFound = errors.New("–∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")

func (b *Bot) handleStart(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	isWalletAlreadyExists, err := b.app.Wallets.IsExists.IsExists(strconv.FormatInt(chatID, 10))
	if err != nil {
		b.sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s.", err.Error()), WalletSupportKeyboard()) // TODO handle this
		b.stateManager.SetState(chatID, StateAwaitingHelpRequest, nil)
		return
	}

	if isWalletAlreadyExists {
		text := "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!"
		b.sendMessage(chatID, text, MainMenuKeyboard())
		b.stateManager.ClearState(chatID)
		return
	}

	welcomeText := "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Travel Wallet Bot! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–µ–¥–µ–Ω–∏—è —Å—á–µ—Ç–∞ –≤ —É—Å–ª–æ–≤–∏—è—Ö –æ—Ç—Å—É—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –±–∞–Ω–∫–∏–Ω–≥–∞, –Ω–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø–ª–∞—Å—Ç–∏–∫–æ–≤–æ–π –∫–∞—Ä—Ç—ã."
	guideText := "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –¥–ª—è —Ä–∞—Å–ø–ª–∞—Ç—ã (–±–∞–∑–æ–≤—É—é, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å) –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–µ <i>(RUB, KGS, KZT...)</i>"

	welcomeMsg := tgbotapi.NewMessage(chatID, welcomeText)
	welcomeMsg.ParseMode = tgbotapi.ModeHTML
	guideMsg := tgbotapi.NewMessage(chatID, guideText)
	guideMsg.ParseMode = tgbotapi.ModeHTML

	b.stateManager.SetState(chatID, StateAwaitingChooseBaseCurrency, make(map[string]string))
	b.api.Send(welcomeMsg)
	b.api.Send(guideMsg)
}

func (b *Bot) handleWalletMenu(update tgbotapi.Update) {
	b.sendMessage(update.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–æ—à–µ–ª—å–∫–æ–º:", WalletMenuKeyboard())
}

func (b *Bot) handleBackToMainMenu(update tgbotapi.Update) {
	b.sendMessage(update.Message.Chat.ID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", MainMenuKeyboard())
}

func (b *Bot) handleAddForeignCurrency(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	formattedText := "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É —Ç—Ä–µ—Ö—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n<blockquote>USD/EUR/RUB</blockquote>"
	msg := tgbotapi.NewMessage(chatID, formattedText)
	msg.ParseMode = tgbotapi.ModeHTML
	b.api.Send(msg)

	b.stateManager.SetState(chatID, StateAwaitingAddForeignCurrency, make(map[string]string))
}

func (b *Bot) handleGetBalance(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	strChatID := strconv.FormatInt(chatID, 10)

	errorProcess := func(chatID int64, err error) {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: "+err.Error(), WalletSupportKeyboard())
		b.stateManager.SetState(chatID, StateAwaitingHelpRequest, nil)
	}

	balance, err := b.app.Wallets.GetBalance.GetBalance(strChatID)

	if err != nil {
		errorProcess(chatID, err)
		return
	}

	balanceBaseCurrency, err := b.app.Wallets.GetBaseCurrency.GetBaseCurrency(strChatID)
	if err != nil {
		errorProcess(chatID, err)
		return
	}

	foreignCurrencies, err := b.app.Wallets.GetForeign.GetCurrencies(strChatID)
	if err != nil {
		errorProcess(chatID, err)
		return
	}

	baseCurrencyDomainStructure, _ := domain.NewCurrency(balance, balanceBaseCurrency)
	foreignCurrenciesBalance, err := b.app.Exchange.ConvertCurrency.ConvertFromBaseToMany(baseCurrencyDomainStructure, foreignCurrencies...) // TODO replace 1st arg "domain.Currency" to string?
	if err != nil {
		errorProcess(chatID, err)
		return
	}

	var responseText strings.Builder
	responseText.WriteString(fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å: %s %s", balance.String(), balanceBaseCurrency))

	if len(foreignCurrenciesBalance) != 0 {
		responseText.WriteString("\n\n–ë–∞–ª–∞–Ω—Å –≤ –≤–∞–ª—é—Ç–µ:\n")
		for _, v := range foreignCurrenciesBalance {
			responseText.WriteString(fmt.Sprintf("üí† %s: %s\n", v.GetCurrencyCode(), v.GetAmount().Mul(balance).StringFixed(2)))
		}
	}

	b.sendMessage(chatID, responseText.String(), WalletMenuKeyboard())
}

func (b *Bot) handleRemoveForeignCurrency(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	strChatID := strconv.FormatInt(chatID, 10)

	foreignCurrencies, err := b.app.Wallets.GetForeign.GetCurrencies(strChatID)
	if err != nil {
		b.sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç: "+err.Error(), WalletSupportKeyboard())
		b.stateManager.SetState(chatID, StateAwaitingHelpRequest, nil)
		return
	}

	if len(foreignCurrencies) == 0 {
		b.sendMessage(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç.", WalletMenuKeyboard())
		b.stateManager.ClearState(chatID)
		return
	}

	formattedText := "–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å."
	b.sendMessage(chatID, formattedText, CurrencyKeyboard(foreignCurrencies))
	b.stateManager.SetState(chatID, StateAwaitingRemoveForeignCurrency, make(map[string]string))
}

func (b *Bot) handleChangeBaseCurrency(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	formattedText := "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É —Ç—Ä–µ—Ö—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞\n<blockquote>USD/EUR/RUB</blockquote>"
	msg := tgbotapi.NewMessage(chatID, formattedText)
	msg.ParseMode = tgbotapi.ModeHTML
	b.api.Send(msg)

	b.stateManager.SetState(chatID, StateAwaitingChangeBaseCurrency, make(map[string]string))
}

func (b *Bot) handleHelp(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID

	responseText := `
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ø—Ä–∞–≤–∫—É!</b>

–≠—Ç–æ –≤–∞—à –≥–∏–¥ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º <i>Travel Wallet Bot</i>.

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>
‚Ä¢ <code>–ë–∞–ª–∞–Ω—Å</code> ‚Äî –ø–æ–∫–∞–∂–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –≤–∞—à–µ–π –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ –∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö –≤–∞–ª—é—Ç–∞—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.
‚Ä¢ <code>–í–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞</code> ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞. –í–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å —Å—É–º–º—É –∏ –≤–∞–ª—é—Ç—É.
‚Ä¢ <code>–°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞</code> ‚Äî –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, –Ω–æ –¥–ª—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ —Å–æ —Å—á–µ—Ç–∞.
‚Ä¢ <code>–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É</code> ‚Äî –¥–æ–±–∞–≤–∏—Ç –Ω—É–∂–Ω—É—é –≤–∞–º –≤–∞–ª—é—Ç—É –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–ª–∞–Ω—Å–∞.
‚Ä¢ <code>–£–¥–∞–ª–∏—Ç—å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É</code> ‚Äî —É–¥–∞–ª–∏—Ç –Ω–µ–Ω—É–∂–Ω—É—é –≤–∞–º –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –±–∞–ª–∞–Ω—Å–∞.
‚Ä¢ <code>–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É</code> ‚Äî –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é.

<b>–ß—Ç–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ?</b>
<i>–°–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è:</i> 
‚Ä¢ –û–±–º–µ–Ω –≤–∞–ª—é—Ç –∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø—Ä–∏ –≤–≤–æ–¥–µ –ª—é–±—ã—Ö —á–∏—Å–µ–ª (–≤–∞—à –∑–∞–ø—Ä–æ—Å —Å–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–µ: 12.45+4.35+1+5.4, —á—Ç–æ —É–¥–æ–±–Ω–æ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Å –º–∞–≥–∞–∑–∏–Ω–Ω—ã—Ö —á–µ–∫–æ–≤).
‚Ä¢ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –ø–æ–ø–æ–ª–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å)
`

	msg := tgbotapi.NewMessage(chatID, responseText)
	msg.ParseMode = tgbotapi.ModeHTML
	msg.ReplyMarkup = MainMenuKeyboard()

	b.api.Send(msg)
	b.stateManager.ClearState(chatID)
}

func (b *Bot) handleDeposit(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	b.stateManager.SetState(chatID, StateAwaitingDepositAmount, make(map[string]string))
	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", tgbotapi.NewRemoveKeyboard(true))
}

func (b *Bot) handleWithdraw(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	b.stateManager.SetState(chatID, StateAwaitingWithdrawAmount, make(map[string]string))
	b.sendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è:", tgbotapi.NewRemoveKeyboard(true))
}

func (b *Bot) handleNothing(update tgbotapi.Update) {
	chatID := update.Message.Chat.ID
	b.sendMessage(chatID, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", nil)
}
